#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
int gcd(int a, int b) {
    if (b == 0) {
        return a;
    }
    return gcd(b, a % b);
}

int modInverse(int a, int m) {
    a = a % m;
    for (int x = 1; x < m; x++) {
        if ((a * x) % m == 1) {
            return x;
        }
    }
    return -1; 
}
void breakAffineCipher(char *ciphertext, char mostFreqChar, char secondMostFreqChar) {
    int i, j;
    int len = strlen(ciphertext);
    int freq[26] = {0};
    int maxFreqIndex, secondMaxFreqIndex;

    // Calculate frequencies of letters in ciphertext
    for (i = 0; i < len; ++i) {
        if (isalpha(ciphertext[i])) {
            freq[toupper(ciphertext[i]) - 'A']++;
        }
    }

    // Find indices of most frequent and second most frequent characters
    maxFreqIndex = mostFreqChar - 'A';
    secondMaxFreqIndex = secondMostFreqChar - 'A';

    // Assume the plaintext letters corresponding to 'B' and 'U'
    // For example, let's assume 'B' corresponds to 'E' and 'U' corresponds to 'T'
    // These assumptions are based on common digraphs or words in English
    int p1 = 'E' - 'A'; // E is a common letter
    int c1 = maxFreqIndex;
    int p2 = 'T' - 'A'; // T is a common letter
    int c2 = secondMaxFreqIndex;

    // Iterate over possible values of 'a' (must be coprime with 26)
    for (int a = 1; a < 26; a += 2) { // a must be odd to ensure it has an inverse mod 26
        if (gcd(a, 26) != 1) {
            continue;
        }

        // Compute b for each a and check if it decrypts 'B' and 'U' correctly
        int a_inv = modInverse(a, 26);
        if (a_inv == -1) {
            continue;
        }

        // Try to decrypt 'B' and 'U' assuming they correspond to 'E' and 'T'
        int b1 = (a_inv * (c1 - p1 + 26)) % 26;
        int b2 = (a_inv * (c2 - p2 + 26)) % 26;

        // Decrypt the entire ciphertext using the guessed (a, b)
        for (j = 0; j < len; ++j) {
            if (isalpha(ciphertext[j])) {
                char base = islower(ciphertext[j]) ? 'a' : 'A';
                int p = (a_inv * (ciphertext[j] - base - b1 + 26)) % 26;
                ciphertext[j] = p + base;
            }
        }

        printf("Possible plaintext (a = %d, b = %d):\n%s\n\n", a, b1, ciphertext);
    }
}

int main() {
    char ciphertext[1000];
    char mostFreqChar = 'B';
    char secondMostFreqChar = 'U';

    printf("Enter the ciphertext: ");
    fgets(ciphertext, sizeof(ciphertext), stdin);
    ciphertext[strcspn(ciphertext, "\n")] = '\0'; // Remove trailing newline character

    breakAffineCipher(ciphertext, mostFreqChar, secondMostFreqChar);

    return 0;
}
